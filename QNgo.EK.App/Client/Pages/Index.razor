@page "/"
@implements IDisposable

@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.DependencyInjection

@inject HttpClient _httpClient;
@inject NavigationManager _navigationManager;

<div class="d-flex flex-column h-100">
    <div class="flex-fill">
        @*@if (_card != null)
            {
                <PlayingCard Model="_card" IsFlipped="_isFlipped">
                    <FrontFace>
                        <FrontCardFace Model="_card" />
                    </FrontFace>
                    <BackFace>
                        <BackCardFace />
                    </BackFace>
                </PlayingCard>}*@
        <button @onclick="Go">Go</button>
        <button @onclick="() => _isFlipped = !_isFlipped">Flip</button>
        <div class="d-flex">
            @foreach (var player in _playerStates)
            {
                <PlayerVisual @key="player.PlayerId" Player="player" />
            }
        </div>
        @*<div class="d-flex">
                <div>
                    <div>
                        Draw pile
                    </div>
                    <CardPile Cards="_deck" class="mx-2">
                        <CardTemplate>
                            <PlayingCard class="card-xs" IsFlipped="context.IsFlipped">
                                <FrontFace>
                                    <FrontCardFace Model="context" />
                                </FrontFace>
                                <BackFace>
                                    <BackCardFace />
                                </BackFace>
                            </PlayingCard>
                        </CardTemplate>
                    </CardPile>
                </div>
                <div>
                    <div>
                        Discard pile
                    </div>
                    <CardPile Cards="_discardPile" class="mx-2">
                        <CardTemplate>
                            <PlayingCard class="card-xs" IsFlipped="context.IsFlipped">
                                <FrontFace>
                                    <FrontCardFace Model="context" />
                                </FrontFace>
                                <BackFace>
                                    <BackCardFace />
                                </BackFace>
                            </PlayingCard>
                        </CardTemplate>
                    </CardPile>
                </div>
            </div>*@
        <div>
            @_winnerMessage
        </div>
    </div>
    @*<PlayingHand Cards="_cards">
            <CardTemplate>
                <PlayingCard class="card-sm hover" Click="() => SelectCard(context)">
                    <FrontFace>
                        <FrontCardFace Model="context" />
                    </FrontFace>
                    <BackFace>
                        <BackCardFace />
                    </BackFace>
                </PlayingCard>
            </CardTemplate>
        </PlayingHand>*@
</div>



@code { private HubConnection hubConnection;
    private string _winnerMessage;
    private int _currentPlayerId;
    private ICollection<CardState> _deck = new List<CardState>();
    private ICollection<CardState> _discardPile = new List<CardState>();
    private ICollection<PlayerState> _playerStates = new List<PlayerState>();
    private IDictionary<int, ICollection<CardState>> _playerCards = new Dictionary<int, ICollection<CardState>>();
    private bool _isFlipped;
    private List<QNgo.EK.Abstractions.ICard> _cards = new List<Abstractions.ICard>();
    private QNgo.EK.Abstractions.ICard _card;

    protected async override Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri("/gameHub"))
            .Build();

        hubConnection.On<int, Abstractions.TurnPhase>("TurnPhaseExecuting", (currentPlayerId, currentTurnPhase) =>
        {
            _currentPlayerId = currentPlayerId;
            StateHasChanged();
        });

        hubConnection.On<IEnumerable<CardState>>("DiscardPileStateChanged", cards =>
        {
            _discardPile = cards.ToList();
            StateHasChanged();
        });

        hubConnection.On<IEnumerable<CardState>>("DeckStateChanged", cards =>
        {
            _deck = cards.ToList();
            StateHasChanged();
        });

        hubConnection.On<IEnumerable<PlayerState>>("PlayersChanged", players =>
        {
            _playerStates = players.ToList();
            StateHasChanged();
        });

        hubConnection.On<int>("EndGameCondition", winningPlayerId =>
        {
            _winnerMessage = $"The winner is player {winningPlayerId}!";
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        //var repo = new QNgo.EK.Engine.FakeCardRepo();
        //_cards = (await repo.GetAllCardsAsync()).GroupBy(c => c.Family).Select(g => g.First()).ToList();
    }

    private void Go()
    {
        _ = _httpClient.GetAsync("api/Games");
    }

    private void SelectCard(QNgo.EK.Abstractions.ICard card)
    {
        _card = card;
        StateHasChanged();
    }

    private List<Abstractions.States.ICardState> GetDummyCards(int count)
    {
        var cards = new List<Abstractions.States.ICardState>();
        for (int i = 0; i < count; i++)
        {
            cards.Add(CardState.CreateFlipped(Guid.NewGuid()));
        }
        return cards;
    }

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}