@typeparam T

<div @attributes="AdditionalAttributes">
    <div class="player-hand-container">
        <div class="player-hand">
            @for (int i = 0; i < Cards.Count; i++)
            {
                <div style="transform:rotate(@GetCardRotation(i, Cards.Count)deg);transition:transform 0.3s">
                    @CardTemplate(Cards.ElementAt(i))
                </div>
            }
        </div>
        <span class="badge badge-pill badge-primary mx-auto" style="z-index:2;">@Cards.Count</span>
    </div>
</div>

@code {
    private const double MaxFanAngle = 40;

    [Parameter]
    public ICollection<T> Cards { get; set; } = new List<T>();

    [Parameter]
    public RenderFragment<T> CardTemplate { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

    private double GetCardRotation(int cardPosition, int total)
    {
        return (((total - 1) / 2.0) - cardPosition) * -1 * Math.Min(10, MaxFanAngle / Cards.Count);
    }
}
