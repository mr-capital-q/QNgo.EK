@typeparam T

<div class="@CssClass" @onclick="Click">
    <div class="front-content">
        @if (!_isFrontObfuscated)
        {
            @FrontFace(Model)
        }
        else
        {
            <p class="text-center my-2">No cheating!</p>
        }
    </div>
    <div class="back-content">
        @BackFace(Model)
    </div>
</div>

@code {
    private bool _isFrontObfuscated;

    [Parameter]
    public T Model { get; set; }

    [Parameter]
    public RenderFragment<T> FrontFace { get; set; }

    [Parameter]
    public RenderFragment<T> BackFace { get; set; }

    [Parameter]
    public bool IsFlipped { get; set; }

    [Parameter]
    public Action Click { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

    protected string CssClass
    {
        get
        {
            var coreClasses = $"card{(IsFlipped ? " flipped" : string.Empty)}";

            if (AdditionalAttributes != null &&
                AdditionalAttributes.TryGetValue("class", out var @class) &&
                !string.IsNullOrEmpty(Convert.ToString(@class)))
                return $"{@class} {coreClasses}";

            return coreClasses;
        }
    }

    public async void Flip()
    {
        IsFlipped = !IsFlipped;
        StateHasChanged();

        if (!IsFlipped)
        {
            _isFrontObfuscated = false;
            return;
        }

        await Task.Delay(300); // 0.3s to match css flip animation
        _isFrontObfuscated = true;
        StateHasChanged();
    }
}
